# Ansible playbook for deploying a Flask app

---
# Install system apt packages
- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
  - name: update cache
    apt: name=python3 state=latest update_cache=yes cache_valid_time=43200
#  - name: disable lighttpd
#    systemd: name=lighttpd state=stopped enabled=no  # To avoid conflicts with nginx
  - name: install packages
    apt: 
        name: 
   
          - tree         # Optional
          - python3-pip
          - python3-dev
          - python3-venv
          - nginx
          - ufw
        state: latest  
        
  - name: Install virtualenv via pip
    pip:
      name: virtualenv
      executable: pip3
      
# Install the app, note: don't do these tasks with become sudo
- hosts: webservers
  tasks:
  - name: clone repo
    git:
      repo: 'https://github.com/{{ github_user }}/{{ app_name }}.git'
      dest: /home/{{ ansible_ssh_user }}/{{ app_name }}
      update: yes  # Does a git pull if the repo already exists

  - name: install modules in a virtualenv
    become: yes
    become_method: sudo
    pip:
      requirements: /home/{{ ansible_ssh_user }}/{{ app_name }}/requirements.txt
      virtualenv: /home/{{ ansible_ssh_user }}/{{ app_name }}/env
      
      virtualenv_command: '/usr/bin/python3 -m venv'  
  - name: template python config
    template:
      src: config.py.example
      dest: /home/{{ ansible_ssh_user }}/{{ app_name }}/config.py
    
# Configure app systemd service and nginx and build rpi_ws281x library
- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
  - name: Build rpi_ws281x library
    shell: /home/{{ ansible_ssh_user }}/{{ app_name }}/build_lib.sh

  - name: template systemd service config
    template:
      src: .service
      dest: /etc/systemd/system/{{ app_name }}.service
  - name: start systemd app service
    systemd: name={{ app_name }}.service state=restarted enabled=yes
  - name: template nginx site config
    template:
      src: .nginx
      dest: /etc/nginx/sites-available/{{ app_name }}
  - name: remove default nginx site config
    file: path=/etc/nginx/sites-enabled/default state=absent
  # - command: mv /etc/nginx/sites-enabled/default /tmp/nginx.sites-enabled.default
  - name: enable nginx site
    file:
      src: /etc/nginx/sites-available/{{ app_name }}
      dest: /etc/nginx/sites-enabled/default
      state: link
      force: yes
  - name: restart nginx
    systemd: name=nginx state=restarted 
  - name: open firewall for nginx
    ufw:
      rule: allow
      name: Nginx Full

# Run a quick test to verify the site is working
- hosts: webservers
  tasks:
  - name: get url
    get_url:
      url: http://{{inventory_hostname}}
      dest: /tmp/index.html
  - name: read html
    shell: cat /tmp/index.html
    register: html_contents
  - name: check for string in html
    when: html_contents.stdout.find('hello') != -1
    debug: msg="success!"
